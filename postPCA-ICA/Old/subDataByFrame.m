function [dataFrames,trialIDs,ITIIDs] = subDataByFrame(data,planeItRanges,minFrames)
%subDataByFrame.m Subsets data by each frame such that data is nSavedVals x
%nFrames
%
%INPUTS
%data - nSavedVals by nIterations data array generated by virmen
%planeItRanges - nFrames x 2 array containing start and stop iteration
%   numbers for each frame
%minFrames - minimum number of frames for a trial to count
%
%OUTPUTS
%dataFrames - nSavedVals x nFrames array containing the averaged values of
%   each saved val for each frame
%trialIDs - 2 x nFrames array containing the corresponding trial number of
%       each frame (row 1) and a 0 or 1 indicating whether complete trial
%       is present (row 2)
%ITIIDs - 1 x nFrames array containing the ITI number
%
%ASM 10/13

minRange = 10;
%get nFrames 
nFrames = size(planeItRanges,1);

%get nSavedVals
nSavedVals = size(data,1);

%%%%%%%%%%%%% USE ARRAYFUN TO SUBSET DATA %%%%%%%%%

%generate anonymous function to take mean of dataArray between start and
%stop 
dataFunc = @(dataArray,start,stop) nanmean(dataArray(:,start:stop),2);

%perform arrayfun to apply dataFunc in vectorized fashion
meanDataCells = arrayfun(@(start,stop) dataFunc(data,start,stop),...
    planeItRanges(:,1),planeItRanges(:,2),'UniformOutput',false);

%convert meanDataCells into numel x 1 array
dataFrames = cell2mat(meanDataCells);

%reshape dataFrames
dataFrames = reshape(dataFrames,nSavedVals,nFrames);

%ceil inITI and isReward
dataFrames(8:9,:) = ceil(dataFrames(8:9,:));

%remove nans
for i = 1:size(dataFrames,1) %for each row
    temp = dataFrames(i,:);
    nanInd = find(isnan(temp));
    newInd = nanInd + 1;
    eliminateNaNs = false;
    while ~eliminateNaNs
        newInd(ismember(newInd,nanInd)) = newInd(ismember(newInd,nanInd)) + 1; 
        if ~any(ismember(newInd,nanInd))
            eliminateNaNs = true;
        end
    end
    temp(nanInd) = temp(newInd);
    dataFrames(i,:) = temp;
end

%%%%%%%%%%%%%%%%%%% GET TRIALIDS %%%%%%%%%%%%%%%%%%%

%get trial start iterations and trial end iterations
trialEnds = find(diff(data(9,:)) == 1);
trialStarts = [1 find(diff(data(9,:)) == -1)+1];
if data(9,end) == 0
    trialStarts = trialStarts(1:end - 1);
end

%ensure trialStarts and trialEnds are same size
if length(trialStarts) ~= length(trialEnds) 
    error('# trial starts does not match # trial ends');
end

%get frame starts
frameStarts = planeItRanges(:,1)';

%get trialIDs
trialIDs = arrayfun(@(frameStartVals) find(frameStartVals >= trialStarts,1,'last'),...
    frameStarts,'UniformOutput',false);

%convert to matrix
trialIDs = cell2mat(trialIDs);

%multiply by dataFrames(9,:) to only get ITI Trials
ITIIDs = trialIDs.*dataFrames(9,:);

%multiply by 1 - dataFrames(9,:) to eliminate non ITI trials
trialIDs = trialIDs.*(1-dataFrames(9,:));

%get unique trials
% uniqueTrials = unique(trialIDs);

%ensure trials are completely accounted for (all frames from trial are
%present)
for i = 1:length(trialStarts) %for each trial
    
%     if any(frameStarts <= trialStarts(i)) &&... %if any frames start before the trial starts
%             any(frameStarts >= trialEnds(i)) &&... %and if any frames start after the trial ends
%             sum(trialIDs(1,:) == i) >= minFrames % and if the trial is at least minFrames 
%         trialIDs(2,trialIDs(1,:) == i) = 1; %trial is complete
%     else
%         trialIDs(2,trialIDs(1,:) == i) = 0;
%     end
     if ~isempty(frameStarts(find(frameStarts<trialStarts(i),1,'last'))) &&... %if at least one frame comes before the trial starts
             ~isempty((frameStarts(find(frameStarts>trialEnds(i),1,'first')))) &&... %and if at least one frame comes after the trial ends
             (frameStarts(find(frameStarts<trialStarts(i),1,'last'))+minRange) >= trialStarts(i) &&... %if there was a frame that started at least minRange iterations before the trial started 
             (frameStarts(find(frameStarts>trialEnds(i),1,'first'))) <= (trialEnds(i) + minRange) &&... %if there was a frame at least minRange iterations after the end of the trial
             sum(trialIDs(1,:) == i) >= minFrames %and if the trial is at least minFrames
         trialIDs(2,trialIDs(1,:) == i) = 1; %trial is complete
    else
        trialIDs(2,trialIDs(1,:) == i) = 0;
    end

end

